
#ifndef CONTROLLER_H
#define CONTROLLER_H

#define FIELD_N 20 /*!< Высота игрового поля*/
#define FIELD_M 10 /*!< Ширина игрового поля*/

#define KEY_R 114 /*!< Код клавиши r*/
#define KEY_P 112 /*!< Код клавиши p*/
#define KEY_Q 113 /*!< Код клавиши q*/
#define KEY_Z 122 /*!< Код клавиши z*/
#define KEY_SPACE 32

#ifdef __cplusplus
extern "C" {
#endif

/** @file */

/**
 * @enum UserAction_t
 * @brief Перечисление возможных действия пользователя в игре.
 *
 * Возможные действия пользователя.
 */

typedef enum {
  Start,         ///< Инициализация игры
  Pause,         ///< Пауза
  Terminate,     ///< Конец игры или выход
  Left,          ///< Перемещение влево
  Right,         ///< Перемещение вправо
  Up,            ///< Поворот фигуры
  Down,          ///< Перемещение вниз
  Action,        ///< Действие в игре
  Uninitialized  ///< Для первичного объявления
} UserAction_t;

/**
 * @brief Структура содержит параметры игрового поля, необходимые для
 * графического отображения игры на каждом шаге
 *
 * @struct GameInfo_t
 */

typedef struct {
  int **field; /*!< Двумерная целочисленная матрица, содержащая состояние всего
                * игрового поля */
  int **next; /*!< Двумерная целочисленная матрица, содержащая следующую фигуру,
               * которая появится на поле */
  int next_size; /*!< Целочисленный размер стороны матрицы, содержащей
                  * фигуру, которая появится следующей на поле */
  int score;     /*!< Содержит текущее количество очков, заработанное игроком */
  int high_score; /*!< Содержит максимальное количество очков, заработанное в
                   * этой игре, считывается из файла high_score.txt */
  int level;      /*!< Содержит текущий уровень, он увеличивается с увеличением
                   * очков, и влияет на скорость игры */
  int speed; /*!< Содержит целочисленное число, описывающее скорость падения
                фигуры */
  int pause; /*!< Булевая переменная, true - если игра на паузе, false -  если
                 игра в активной фазе */
} GameInfo_t;

UserAction_t get_user_action(int input);

#include <stdbool.h>
#include <sys/time.h>

#include "brick_game/tetris/backend_t.h"

#ifdef __cplusplus
}
#endif

#endif